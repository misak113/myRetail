<?php

// Load Nette Framework or autoloader generated by Composer
require __DIR__ . '/../vendor/autoload.php';
require __DIR__ . '/shortcuts.php';


$configurator = new Nette\Configurator;

// Enable Nette Debugger for error visualisation & logging
//$configurator->setDebugMode(TRUE);
$configurator->enableDebugger(__DIR__ . '/../log');

// Specify folder for cache
$configurator->setTempDirectory(__DIR__ . '/../temp');

// Enable RobotLoader - this will load all classes automatically
$configurator->createRobotLoader()
	->addDirectory(__DIR__)
	->addDirectory(__DIR__ . '/../vendor')
	->addDirectory(__DIR__ . '/../system/library')
	->addDirectory(__DIR__ . '/../admin/model/module')
	->addDirectory(__DIR__ . '/../catalog/model/module')
	->register();

// Create Dependency Injection container from config.neon file
$configurator->addConfig(__DIR__ . '/config/config.neon');
$configurator->addConfig(__DIR__ . '/config/config.local.neon');

// @todo move it to itself file
class OpencartExtension extends Nette\DI\CompilerExtension {
	public function loadConfiguration() {
		$containerBuilder = $this->compiler->getContainerBuilder();
		$urlDef = new Nette\DI\ServiceDefinition;
		$containerBuilder->addDefinition('oc_url', $urlDef->setClass('Url', array('', '')));
		$languageDef = new Nette\DI\ServiceDefinition;
		$containerBuilder->addDefinition('oc_language', $languageDef->setClass('Language', array('')));
		$sessionDef = new Nette\DI\ServiceDefinition;
		$containerBuilder->addDefinition('oc_session', $sessionDef->setClass('Session', array('')));
		$sessionDef = new Nette\DI\ServiceDefinition;
		$containerBuilder->addDefinition('oc_customer', $sessionDef->setClass('Customer', array('')));
		$sessionDef = new Nette\DI\ServiceDefinition;
		$containerBuilder->addDefinition('oc_config', $sessionDef->setClass('Config', array()));
	}
}

// opencart services
$configurator->onCompile = function ($configurator, $compiler) {
	$compiler->addExtension('opencart', new OpencartExtension);
};

$container = $configurator->createContainer();

return $container;
